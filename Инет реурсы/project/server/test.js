const http = require('http');
const url = require('url');

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const randomData = {
  animals: ['üê± –ö–æ—Ç', 'üê∂ –°–æ–±–∞–∫–∞', 'üê∞ –ö—Ä–æ–ª–∏–∫', 'ü¶ä –õ–∏—Å–∞', 'üêª –ú–µ–¥–≤–µ–¥—å', 'üêº –ü–∞–Ω–¥–∞'],
  colors: ['üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üü° –ñ–µ–ª—Ç—ã–π', 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π', 'üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π'],
  cities: ['üèôÔ∏è –ú–æ—Å–∫–≤–∞', 'üåÜ –ù—å—é-–ô–æ—Ä–∫', 'üè∞ –ü–∞—Ä–∏–∂', 'üóº –¢–æ–∫–∏–æ', 'üåÉ –õ–æ–Ω–¥–æ–Ω', 'üèîÔ∏è –°–∏–¥–Ω–µ–π'],
  quotes: [
    '–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.',
    '–í—Å—ë, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤–æ–æ–±—Ä–∞–∑–∏—Ç—å ‚Äî —Ä–µ–∞–ª—å–Ω–æ.',
    '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π.',
    '–õ—É—á—à–µ –ø–æ–∑–¥–Ω–æ, —á–µ–º –Ω–∏–∫–æ–≥–¥–∞.'
  ],
  facts: [
    '–ö–æ—Ç—ã —Å–ø—è—Ç –æ–∫–æ–ª–æ 70% —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.',
    '–ú–µ–¥ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∏—â–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.',
    '–°–µ—Ä–¥—Ü–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –µ—ë –≥–æ–ª–æ–≤–µ.',
    '–°—Ç—Ä–∞—É—Å—ã –±–µ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –ª–æ—à–∞–¥–µ–π.'
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomItem(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function generateRandomInfo() {
  const types = ['animal', 'color', 'city', 'quote', 'fact', 'mixed'];
  const type = getRandomItem(types);
  
  switch (type) {
    case 'animal':
      return { type: '–ñ–∏–≤–æ—Ç–Ω–æ–µ', data: getRandomItem(randomData.animals) };
    case 'color':
      return { type: '–¶–≤–µ—Ç', data: getRandomItem(randomData.colors) };
    case 'city':
      return { type: '–ì–æ—Ä–æ–¥', data: getRandomItem(randomData.cities) };
    case 'quote':
      return { type: '–¶–∏—Ç–∞—Ç–∞', data: getRandomItem(randomData.quotes) };
    case 'fact':
      return { type: '–§–∞–∫—Ç', data: getRandomItem(randomData.facts) };
    case 'mixed':
      return {
        type: '–ú–∏–∫—Å',
        data: {
          animal: getRandomItem(randomData.animals),
          color: getRandomItem(randomData.colors),
          fact: getRandomItem(randomData.facts)
        }
      };
  }
}

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const pathname = parsedUrl.pathname;
  const method = req.method;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è CORS)
  if (method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  if (pathname === '/' && method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–≤–µ—Ä</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
          .info { background: #f0f0f0; padding: 20px; border-radius: 10px; margin: 20px 0; }
          button { padding: 10px 20px; margin: 5px; cursor: pointer; }
          pre { background: #eee; padding: 10px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <h1>üé≤ –°–µ—Ä–≤–µ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</h1>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
        <ul>
          <li><strong>GET /random</strong> - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</li>
          <li><strong>POST /random</strong> - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</li>
        </ul>
        <div>
          <button onclick="fetchRandom('GET')">–¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞</button>
          <button onclick="fetchRandom('POST')">–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞</button>
        </div>
        <div id="result"></div>
        
        <script>
          async function fetchRandom(method) {
            const options = method === 'POST' ? { 
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ timestamp: Date.now() })
            } : {};
            
            try {
              const response = await fetch('/random', options);
              const data = await response.json();
              document.getElementById('result').innerHTML = 
                '<div class="info"><h3>' + data.type + '</h3><pre>' + 
                JSON.stringify(data.data, null, 2) + '</pre><p>–í—Ä–µ–º—è: ' + 
                new Date(data.timestamp).toLocaleString() + '</p></div>';
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞:', error);
            }
          }
        </script>
      </body>
      </html>
    `);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /random
  if (pathname === '/random') {
    if (method === 'GET') {
      // –ü—Ä–æ—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è GET
      const randomInfo = generateRandomInfo();
      
      res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({
        message: 'GET –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        type: randomInfo.type,
        data: randomInfo.data,
        timestamp: new Date().toISOString(),
        method: 'GET'
      }, null, 2));
      
    } else if (method === 'POST') {
      // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ POST –∑–∞–ø—Ä–æ—Å–∞
      let body = '';
      
      req.on('data', chunk => {
        body += chunk.toString();
      });
      
      req.on('end', () => {
        let postData = {};
        try {
          postData = JSON.parse(body || '{}');
        } catch (e) {
          postData = { error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON' };
        }
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è POST
        const randomInfos = [];
        for (let i = 0; i < 3; i++) {
          randomInfos.push(generateRandomInfo());
        }
        
        res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
        res.end(JSON.stringify({
          message: 'POST –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
          receivedData: postData,
          items: randomInfos,
          timestamp: new Date().toISOString(),
          method: 'POST',
          count: randomInfos.length
        }, null, 2));
      });
      
    } else {
      // –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      res.writeHead(405, { 'Content-Type': 'application/json; charset=utf-8' });
      res.end(JSON.stringify({
        error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
        allowedMethods: ['GET', 'POST']
      }));
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç–µ–π
  res.writeHead(404, { 'Content-Type': 'application/json; charset=utf-8' });
  res.end(JSON.stringify({
    error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
    availableEndpoints: ['GET /', 'GET /random', 'POST /random']
  }));
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üéØ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
  console.log(`üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:`);
  console.log(`   GET  / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º`);
  console.log(`   GET  /random - –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å`);
  console.log(`   POST /random - –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});