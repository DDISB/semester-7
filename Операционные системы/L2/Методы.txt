Деккер
Алгоритм Деккера предназначен для организации работы потоков с критической секцией. Поле turn показывает, какой из потоков имеет приоритет при входе в критическую секцию. Поле flag означает, что данный процесс пытается войти в критическую секцию. Когда процесс входит в КС, он устанавливает значение flag в единицу. После выхода из КС процесс сбрасывает значение flag и передаёт приоритет turn другому процессу. Если КС занята одним процессом, то другой процесс при попытке войти в КС переходит в состояние ожидания. При этом если процесс имеет приоритетное право войти в КС, он устанавливает значение flag равным 1, иначе оставляет его равным 0.

Петерсон
Алгоритм Петерсона считается более изящным способом организации процессов, чем алгоритм Деккера. Когда процесс пытается войти в критическую секцию, он устанавливает значение flag равным 1, а также передаёт приоритет turn другому процессу. В случае, если приоритет turn принадлжит другому процессу, а также значение flag другого процесса равно 1, процесс переходит в состояние ожидания. Если одно из вышеперечисленных условий не выполняется, процесс входит в КС. Когда процесс выходит из КС, он сбрасывает значение flag. Таким образом, если первый процесс находится в состоянии ожидания, в второй процесс выходит из критической секции, второй процесс не сможет снова попасть в критическую секцию до тех пор, пока в ней не побывает первый процесс.

Парикмахерская 1
Задача о парикмахере формулируется следующим образом: необходимо предоставлять доступ процессов (клиентов) к критической секции (парикмахеру) таким образом, чтобы критическая секция была занята, когда в очереди есть хотя бы один процесс. Роль парикмахера выполняет мьютекс, значение которого равно номеру процесса, который находится в КС, и -1 когда КС свободна. Если процесс КС занята, процесс переходит в состояние ожидания и встаёт в очередь. Когда процесс выходит из КС, в КС входит процесс, который находился в очереди первым.

Парикмахерская 2
В отличие от предыдущей задачи в КС может находиться одновременно два процесса. Каждый раз, когда процесс пытается войти в КС, проверяется значение семафора. Если семафор больше 0, его значение уменьшается на 1, а процесс переходит в КС. Если значение семафора равно 0, процесс переходит в состояние ожидания и встаёт в очередь. Когда процесс выходит из КС, в КС входит процесс, находящийся первый в очереди. Если очередь ожидающих процессов пуста, значение семафора увеличивается на 1.

Поставщики и потребители
Данная задача предназначена для решения проблемы доступа к общему буферу, в который одни процессы записывают, а другие считывают данные. Первый семафор отвечает за количество свободных ячеек, а второй семафор - за количество ячеек, в которых есть данные. Поставщик может начать запись только в том случае, если значение семафора больше 0, при этом значение семафора уменьшается на 1. По окончанию записи значение второго семафора увеличивается на 1. Аналогичным образом потребитель может начать чтение только если значение второго семафора больше 0, по окончанию процесса чтения значение первого семафора увеличивается на 1.
Так как одновременно с буфером может работать только один процесс, в системе установлен мьютекс, который указывает на процесс, который в данный момент работает с буфером.
После того, как поставщик закончил процесс записи, следующим в КС входит ожидающий потребитель (если такой есть). Если ожидающих потребителей нет, в КС входит ожидающий поставщик. Если ожидающих процессов нет, мьютекс освобождается.
Аналогичным образом после того, как потребитель закончил процесс чтения, следующим в КС входит ожидающий поставщик (если такой есть). Если ожидающих поставщиков нет, в КС входит другой ожидающий потребитель. Если ожидающих процессов нет, мьютекс освобождается.

писатели и читатели
Задача о писателях и читателях формулируется следующим образом: процесс-писатель записывает данные в буфер, в то время как процессы-читатели могут считывать записанные данные. Записывать данные может одновременно только один процесс, считывать данные могут одновременно несколько процессов. Переменная rc указывает на количество читающих процессов, семафор sem указывает на доступность буфера. В данной вариации задачи реализован приоритет читателя, то есть писатель вынужден ждать, пока все читатели не освободят процесс и значение семафора не станет равным 1. 
Если буфер не использует ни один из читателей, то первый процесс-читатель, входящий в КС, должен проверить значение семафора, и если оно не равно 0, уменьшить его на 1, увеличить rc и войти в КС. Если rc не равно 0, то читатель входит в КС без проверки значения семафора. После того, как процесс заканчивает чтение, значение rc уменьшается на 1. Если процесс был единственным читателем, то есть rc после уменьшения стал равным 0, значение семафора необходимо увеличить на 1.

курильщики
В задаче о курильщиках есть три процесса (курильщика), которые могут войти в КС (закурить сигарету) только при наличии всех трёх реусрсов (спички, табак и бумага). При этом у каждого из процессов есть бесконечное количество ресурсов одного типа. В обеспечении доступа к КС им помогает слуга, который может забрать у двух процессов по единице ресурса. В этом случае третий процесс забирает эти ресурсы и входит в КС, а слуга выбирает произвольным образом два процесса, у которых заберёт по единице ресурса. Таким образом, процессы, которые будут получать доступ к КС, каждый раз обределяются случайным образом.