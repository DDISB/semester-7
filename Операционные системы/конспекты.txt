Синхронизации процессов

Синхронизация - согласовывает параллельно работующие модули (модули работающие с 1 ресурсом).

Гонки - ситуация при которой результат получаемый прогаммой зависит от взаимной скорости процессов.

Синхронизация нужна при:
- при обмене данными между потоками
- при разделени данных
- при доступе к процессору
- при доступе к устройствам ввода-вывода


Критическая секция  - часть кода программы работающая с ресурсом. Критическая секция должна работать только в одном процессе, второй процесс должен ждать когда первый процесс закончит свою работу.

операции чтения, изменения и сохранения должны быть неделимыми - это называется критическая секция процесса.

Взаимоисключения должны выполняться принудительно.

У критеческой секции нет приоритетов.

Относительные скорости развития потоков неизвестны и произвольны. Мы не знаем когда они войдут в свою критическую секцию.

Самый простой способ - запрет прерываний.

Алгоритм Деккера - использует разделяемые переменные.

Семафор - переменная, которая может изменяться от 0 и до какого-то значения.

0 - ресурс занят, процесс не может зайти в критическую секцию.

Операция wait может проверить значение семафора, если ресурс свободен, то переменная семафора устанавливается в количество свободных ресурсов в системе. (чаще всего 1).

Процесс который записывает ифнормацию - может работать быстрее, не зависит от процесса, который записывает или обрабатывает информацию.

Второй процесс, который работает медленнее - должен обращаться к критической секции и считывать следующую запись после обработанной.

Если первый процесс работает медленно, то перед записью он должен её обрабатывать и потом только записывать уступая. Второй процесс работает быстро.

Возможность задавать симофору значение больше 1. Если есть однотипные ресурсы (7 принтеров, к примеру).

Семафор не имеет приоритетов в очереди


Для решения проблемы инверсии приоритетов можно допустить временное повышение приоритета процесса, который удерживает симофор до уровня самого высоко приоритетного процесса в очереди. Эта операция называется наследовнием приоритета.

Процесс удерживающий симофор выполняется с действующим приоритетом равным большему из двух значений. Исходного приоритета процесса и его унаследованного приоритета.



Мьютексы - НЕ двоичный симофор
У мьютекса 2 состояния.
Мьютекс - это объект ядра.

Семфор блокирует задачи пользователя, а мьютекст блокирует ресурс. Мьютекс получает максимальный приоритет, если задача выполняет как-то действия.

Процесс становится владельцем мьютекса, когда работает с ним, другой процесс обратиться к нему не может.

Если процесс не отдал мьютекс, то в следующий раз получает сразу доступ к общим данным.

Мьютекс считает сколько процессов к нему обратилось и сколько раз обратился какждый процесс.


Если процесс завершился, а мьютекс не освободил, то мьютекст освободит мьютекс сама.

Когда мьютекст не занят - переходит в сигнаьное состояние - готовность для процессов.

Имея ссылку на один мьютекст процессы могут взаимодействовать с 1 ресурсом (по очереди).



Мониторы

Монитор - набор процедур, переменных и других структур данных, объединенных в особый модуль или пакет.

При работе с монитором не нужна критическая секция.
Каждый процесс который хочет порабоать с ресурсом должен войти в монитор, который работает только с 1 процессом.

Процесс входит в монитор, обращается к процедуре, берет нужные данные и покидает монитор. Выполнение функции происходит не монитором. Если ресурсы в мониторе заняты, то монитор ставит его во внутреннюю очередь. Когда первый процесс закончил работу, то возвращается в монитор, возвращает ресурсы и покиадет его. Монитор просматривает внутренюю очередь и если есть кандидаты, выдает им ресурсы.

