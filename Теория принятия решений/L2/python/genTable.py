import pandas as pd
import numpy as np
import dbf

XLSX_FILE_NAME = "car_rating_data1000.xlsx"
DBF_FILE_NAME = f"car_rating_data1000.dbf"

# Устанавливаем seed для воспроизводимости результатов
np.random.seed(44)

# Количество строк
n_rows = 1000

# Генерация синтетических данных для параметров автомобиля
data = {
    # Год выпуска: от 2000 до 2024
    'Год выпуска': np.random.randint(2000, 2025, n_rows),
    
    # Пробег (тыс. км): от 0 до 300
    'Пробег (тыс. км)': np.random.randint(0, 301, n_rows),
    
    # Объем двигателя (л): от 1.0 до 5.0 с шагом 0.1
    'Объем двигателя (л)': np.round(np.random.uniform(1.0, 5.0, n_rows), 1),
    
    # Мощность (л.с.): от 80 до 500
    'Мощность (л.с.)': np.random.randint(80, 501, n_rows),
    
    # Тип коробки передач (0-механика, 1-автомат)
    'Тип КПП (0-мех, 1-авто)': np.random.randint(0, 2, n_rows),
    
    # Тип топлива (0-бензин, 1-дизель, 2-гибрид, 3-электро)
    'Тип топлива (0-бенз,1-диз,2-гибр,3-элек)': np.random.randint(0, 4, n_rows),
    
    # Количество владельцев: от 1 до 5
    'Количество владельцев': np.random.randint(1, 6, n_rows),
    
    # Состояние кузова (1-10 баллов): от 1 до 10
    'Состояние кузова (баллы 1-10)': np.random.randint(1, 11, n_rows),
    
    # Состояние салона (1-10 баллов): от 1 до 10
    'Состояние салона (баллы 1-10)': np.random.randint(1, 11, n_rows),
    
    # Наличие сервисной истории (0-нет, 1-есть)
    'Сервисная история (0-нет,1-есть)': np.random.randint(0, 2, n_rows),
    
    # Стоимость нового аналога (тыс. руб.): от 500 до 10000
    'Стоимость нового (тыс. руб.)': np.random.randint(500, 10001, n_rows)
}

# Создаем DataFrame
df = pd.DataFrame(data)

# Генерируем целевую переменную (рейтинг автомобиля от 1 до 100)
df['Рейтинг автомобиля (1-100)'] = (
    50  # базовый рейтинг
    + (df['Год выпуска'] - 2012) * 1.5  # чем новее, тем выше рейтинг
    - df['Пробег (тыс. км)'] * 0.1  # чем больше пробег, тем ниже рейтинг
    + (df['Объем двигателя (л)'] - 2.0) * 5  # оптимальный объем около 2.0 л
    + (df['Мощность (л.с.)'] - 200) * 0.05  # оптимальная мощность около 200 л.с.
    + df['Тип КПП (0-мех, 1-авто)'] * 3  # автомат лучше механики
    + np.where(df['Тип топлива (0-бенз,1-диз,2-гибр,3-элек)'] == 2, 5, 
              np.where(df['Тип топлива (0-бенз,1-диз,2-гибр,3-элек)'] == 3, 8, 0))  # гибрид и электро лучше
    - (df['Количество владельцев'] - 1) * 2  # чем больше владельцев, тем ниже рейтинг
    + (df['Состояние кузова (баллы 1-10)'] - 5) * 2  # лучше состояние - выше рейтинг
    + (df['Состояние салона (баллы 1-10)'] - 5) * 2  # лучше состояние - выше рейтинг
    + df['Сервисная история (0-нет,1-есть)'] * 4  # наличие истории повышает рейтинг
    + np.random.normal(0, 5, n_rows)  # случайный шум
)

# Ограничиваем рейтинг в диапазоне 1-100 и округляем
df['Рейтинг автомобиля (1-100)'] = np.clip(np.round(df['Рейтинг автомобиля (1-100)']), 1, 100).astype(int)

# Сохраняем в Excel файл
df.to_excel(XLSX_FILE_NAME, index=False)

print(f"Данные сохранены в файл: {XLSX_FILE_NAME}")
print(f"Сгенерировано {n_rows} записей")
print("\nПервые 5 записей:")
print(df.head())

# Читаем Excel файл
df = pd.read_excel(XLSX_FILE_NAME)

# Переименовываем столбцы в английские имена (максимум 10 символов)
df_eng = df.copy()
df_eng.columns = [
    'year', 'mileage', 'eng_vol', 'power', 'transm',
    'fuel_type', 'owners', 'body_cond', 'int_cond',
    'serv_hist', 'new_price', 'rating'
]

# Создаем DBF таблицу с английскими именами
table = dbf.Table(
    DBF_FILE_NAME,
    'year N(4,0); mileage N(3,0); eng_vol N(3,1); power N(3,0); '
    'transm N(1,0); fuel_type N(1,0); owners N(1,0); '
    'body_cond N(2,0); int_cond N(2,0); serv_hist N(1,0); '
    'new_price N(5,0); rating N(3,0)',
    codepage='cp866'
)

# Создаем таблицу и добавляем данные
with table:
    for _, row in df_eng.iterrows():
        table.append(tuple(row.values))

print(f"\nДанные также сохранены в DBF файл: {DBF_FILE_NAME}")
print("\nСоответствие имен полей:")
for ru, eng in zip(df.columns, df_eng.columns):
    print(f"{ru} -> {eng}")