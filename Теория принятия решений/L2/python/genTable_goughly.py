import pandas as pd
import numpy as np
import dbf

XLSX_FILE_NAME = "test_vect1.xlsx"
DBF_FILE_NAME = f"{XLSX_FILE_NAME}.dbf"
# Устанавливаем seed для воспроизводимости результатов
np.random.seed(42)
# Количество строк
n_rows = 1

# Генерация синтетических данных для 10 целочисленных факторов
data = {
    # Кредитный рейтинг (чем выше, тем лучше): от 1 до 10
    'Кредитный рейтинг (баллы 1-10)': np.random.randint(1, 11, n_rows),
    
    # Срок до погашения (лет): от 1 до 30
    'Срок до погашения (лет)': np.random.randint(1, 31, n_rows),
    
    # Объем выпуска (млн руб.): от 500 до 5000
    'Объем выпуска (млн руб.)': np.random.randint(500, 5001, n_rows),
    
    # Купонный доход (% годовых): от 5 до 15
    'Купонная ставка (% годовых)': np.random.randint(5, 16, n_rows),
    
    # Ликвидность (коэффициент оборота): от 1 до 100
    'Ликвидность (коэф. оборота 1-100)': np.random.randint(1, 101, n_rows),
    
    # Волатильность рынка (индекс): от 1 до 10
    'Волатильность рынка (индекс 1-10)': np.random.randint(1, 11, n_rows),
    
    # Ключевая ставка ЦБ (%): от 5 до 20
    'Ключевая ставка ЦБ (%)': np.random.randint(5, 21, n_rows),
    
    # Инфляция (% годовых): от 2 до 15
    'Инфляция (% годовых)': np.random.randint(2, 16, n_rows),
    
    # Рейтинг эмитента (баллы): от 1 до 10
    'Рейтинг эмитента (баллы 1-10)': np.random.randint(1, 11, n_rows),
    
    # Оборот эмитента (млрд руб.): от 10 до 500
    'Оборот эмитента (млрд руб.)': np.random.randint(10, 501, n_rows)
}

# Создаем DataFrame
df = pd.DataFrame(data)

# Генерируем целевую переменную (цену облигации в рублях)
# Номинальная стоимость облигации возьмем за 1000 рублей
nominal = 1000

# Создаем логику зависимости цены от факторов
df['Цена облигации (руб.)'] = (
    nominal  # номинальная стоимость
    + (df['Кредитный рейтинг (баллы 1-10)'] - 5) * 25  # чем выше рейтинг, тем выше цена
    - df['Срок до погашения (лет)'] * 8  # чем longer срок, тем обычно ниже цена
    + (df['Купонная ставка (% годовых)'] - 10) * 15  # чем выше купон, тем выше цена
    - (df['Ключевая ставка ЦБ (%)'] - 10) * 12  # чем выше ключевая ставка, тем ниже цена
    - (df['Инфляция (% годовых)'] - 5) * 10  # чем выше инфляция, тем ниже цена
    + (df['Рейтинг эмитента (баллы 1-10)'] - 5) * 20  # чем выше рейтинг эмитента, тем выше цена
    + np.random.normal(0, 30, n_rows)  # случайный шум
)

# Округляем цену до целых рублей
df['Цена облигации (руб.)'] = np.round(df['Цена облигации (руб.)']).astype(int)

# Сохраняем в Excel файл
df.to_excel(XLSX_FILE_NAME, index=False)


# Читаем Excel файл
df = pd.read_excel(XLSX_FILE_NAME)

# Переименовываем столбцы в английские имена
df_eng = df.copy()
df_eng.columns = [
    'credit_rt', 'maturity', 'issue_vol', 'coupon_rt', 
    'liquidity', 'volatility', 'key_rate', 'inflation',
    'issuer_rt', 'revenue', 'price'
]

# Создаем DBF таблицу с английскими именами
table = dbf.Table(
    DBF_FILE_NAME,
    'credit_rt N(2,0); maturity N(2,0); issue_vol N(5,0); coupon_rt N(2,0); '
    'liquidity N(3,0); volatility N(2,0); key_rate N(2,0); inflation N(2,0); '
    'issuer_rt N(2,0); revenue N(4,0); price N(6,0)',
    codepage='cp866'
)

# Создаем таблицу и добавляем данные
with table:
    for _, row in df_eng.iterrows():
        table.append(tuple(row.values))